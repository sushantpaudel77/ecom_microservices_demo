server:
  servlet:
    context-path: /orders
  port: 9020

spring:
  application:
    name: order-service

  datasource:
    url: jdbc:postgresql://localhost:5432/order_DB
    username: postgres
    password: root
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop
#      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/

management:
  health:
    circuitbreaker:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
    health:
      show-details: always

resilience4j:
  retry:
    config:
        maxRetryAttempts: 3       # Retry failed calls up to 3 times
        waitDuration: 100ms

  rateLimiter:
    instances:
      inventoryRateLimiter:
        limitRefreshPeriod: 5s     # Reset rate limit counter every 5 seconds
        limitForPeriod: 100       # Allow max 100 calls per 5s window
        timeoutDuration: 10ms     # Fail-fast if request can't acquire a permit within 10ms

  circuitbreaker:
    instances:
      inventoryCircuitBreaker:
        registerHealthIndicator: true  # Expose health metrics (e.g., for Actuator)
        slidingWindowSize: 10          # Track last 10 calls for failure rate calculation
        slidingWindowType: COUNT_BASED  # Use call count (vs TIME_BASED) for the window
        minimumNumberOfCalls: 10       # Require 10 calls before tripping the breaker
        failureRateThreshold: 50       # Trip breaker if 50% of calls fail
        waitDurationInOpenState: 20s   # Wait 20s before allowing retries (half-open state)
        permittedNumberOfCallsInHalfOpenState: 3  # Allow 3 test calls in half-open state
        eventConsumerBufferSize: 10    # Buffer size for circuit breaker events (e.g., state transitions)

#    defer-datasource-initialization: true
#
#  sql:
#    init:
#      mode: always
#      data-locations: classpath:data.sql
